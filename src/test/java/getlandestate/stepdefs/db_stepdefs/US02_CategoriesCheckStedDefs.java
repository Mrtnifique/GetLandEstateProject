package getlandestate.stepdefs.db_stepdefs;

import getlandestate.utilities.DBUtils;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.*;

public class US02_CategoriesCheckStedDefs {

    private List<String> actualColumnNames;
    private Map<String, String> actualRowData;

    @Given("Kullanici veri_tabanina baglanir")
    public void kullanici_veri_tabanina_baglanir() {
        DBUtils.createConnection();
        System.out.println("âœ… VeritabanÄ±na baÅŸarÄ±yla baÄŸlanÄ±ldÄ±.");
    }

    @When("KullanÄ±cÄ± categories tablosundan sÃ¼tun isimlerini Ã§eker")
    public void kullanÄ±cÄ±_categories_tablosundan_sutun_isimlerini_ceker() throws SQLException {
        actualColumnNames = DBUtils.getColumnNames("SELECT * FROM categories LIMIT 1");
        System.out.println("ğŸ“‹ Ã‡ekilen sÃ¼tun isimleri: " + actualColumnNames);
    }

    @Then("KullanÄ±cÄ± gelen isimlerin tamamini dogrular")
    public void kullanÄ±cÄ±_gelen_isimlerin_tamamini_dogrular(DataTable dataTable) {
        List<String> expectedColumnNames = dataTable.asList();
        System.out.println("âœ… Beklenen sÃ¼tun isimleri: " + expectedColumnNames);
        Assert.assertEquals("SÃ¼tun isimleri eÅŸleÅŸmiyor!", expectedColumnNames, actualColumnNames);
    }

    @Given("KullanÄ±cÄ± {string} tablosundan {string} nolu id'den bilgileri Ã§eker")
    public void kullanÄ±cÄ±_tablosundan_id_den_bilgileri_ceker(String tableName, String id) throws SQLException {
        actualRowData = new HashMap<>();

        String query = "SELECT * FROM " + tableName + " WHERE id = " + id;
        ResultSet resultSet = DBUtils.createStatement().executeQuery(query);

        if (resultSet.next()) {
            ResultSetMetaData metaData = resultSet.getMetaData();
            for (int i = 1; i <= metaData.getColumnCount(); i++) {
                String columnName = metaData.getColumnName(i);
                String columnValue = resultSet.getString(i);
                actualRowData.put(columnName, columnValue);
            }
        } else {
            Assert.fail("Belirtilen ID'ye sahip veri bulunamadÄ±!");
        }

        System.out.println("ğŸ“‹ Ã‡ekilen satÄ±r bilgileri: " + actualRowData);
    }

    @Then("KullanÄ±cÄ± categories tablosundan gelen bilgiler doÄŸrulanÄ±r")
    public void kullanÄ±cÄ±_categories_tablosundan_gelen_bilgiler_dogrulanir(DataTable dataTable) {
        List<Map<String, String>> expectedList = dataTable.asMaps(String.class, String.class);
        Map<String, String> expectedRowData = expectedList.get(0);

        System.out.println("âœ… Beklenen satÄ±r bilgileri: " + expectedRowData);

        for (String key : expectedRowData.keySet()) {
            String expected = expectedRowData.get(key);
            String actual = actualRowData.get(key);

            // Null kontrolÃ¼ iÃ§in
            if (expected == null) expected = "";
            if (actual == null) actual = "";

            Assert.assertEquals("Alan uyuÅŸmuyor: " + key, expected.trim(), actual.trim());
        }
    }


}
