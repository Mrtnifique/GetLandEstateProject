package getlandestate.stepdefs.e2e_stepdefs;

import getlandestate.pages.ControlPanelPage;
import getlandestate.pages.DashBoardPage;
import getlandestate.utilities.Driver;
import getlandestate.utilities.WaitUtils;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;

public class DashBoardPageStepDefs {
    DashBoardPage dashBoardPage = new DashBoardPage();


    @When("Search butonuna tıklanır")
    public void searchButonunaTiklanir() {
    }


    @When("Dashboard'a tıklar")
    public void dashboardATıklar() {
        dashBoardPage.dashboardButton.click();
    }

    @When("Tur Taleplerim sekmesine tiklar")
    public void turTaleplerimSekmesineTıklar() {
        WaitUtils.waitFor(10);
        dashBoardPage.MyTourRequestsButton.click();
    }




    @When("Tur Cevaplarim sekmesine tiklar")
    public void MyResponsebutonunaTiklar() {
        WaitUtils.waitFor(15);
        dashBoardPage.MyResponseButton.click();
    }


    @When("Kendi ilanlarına ait randevu isteklerini listeler")
    public void kendiIlanlarinaAitRandevuIstekleriniListeler() {
        Assert.assertTrue(dashBoardPage.randevuListesi.isDisplayed());
    }

   

    @Then("İlan adı, tarih ve kullanıcı bilgileri görünmelidir")
    public void ilanAdıTarihVeKullanıcıBilgileriGörünmelidir() {
        Assert.assertTrue(dashBoardPage.mulkiyetListesi.isDisplayed());
        Assert.assertTrue(dashBoardPage.turTarihi.isDisplayed());
        Assert.assertTrue(dashBoardPage.talepEden.isDisplayed());
        Assert.assertTrue(dashBoardPage.turSaati.isDisplayed());
    }

    @When("Bir randevu istegini secer")
    public void birRandevuIsteğiSeçer() {

        WaitUtils.waitFor(2);
        dashBoardPage.ilkRandevuSecButton.click();
    }

    @And("Secilen randevu istegi kabul edilir")
    public void secilenRandevuIstegiKabulEdilir() {
        dashBoardPage.kabulEtButton.click();
    }

    //US_13 TC02
    @Then("Talep durumu \"Onaylandi\" olarak güncellenmelidir")
    public void istekBasariylaKabulEdildiMesajiGorunmelidir() {
        Assert.assertTrue(dashBoardPage.Onaylandi.isDisplayed());
    }


    @And("Tur Taleplerim sekmesine tiklar")
    public void ilanlarimSekmesineTiklar() {
        dashBoardPage.ilanlarimButton.click();
    }



    @Then("Pasif ilan görüntülenebilmeli ve \"Randevu Al\" butonu aktif olmamalı veya görünmemeli")
    public void randevuAlButonuGorunmemeliVeyaAktifOlmamali() {
        try {
            if (dashBoardPage.randevuAlButton.isDisplayed()) {
                Assert.assertFalse("Randevu Al butonu aktif olmamalı!", dashBoardPage.randevuAlButton.isEnabled());
            } else {
                System.out.println("Randevu Al butonu görünmüyor, bu da kabul.");
            }
        } catch (NoSuchElementException e) {
            System.out.println("Randevu Al butonu DOM'da yok, bu da beklenen davranış.");
        }
    }

    @And("URL üzerinden doğrudan randevu alma sayfasına erişilmeye çalışıldığında \"404\" veya yönlendirme olmalıdır")
    public void dogrudanUrlIleRandevuSayfasinaErisimEngellenmeli() {
        // Örnek ID veya URL yapısı: site.com/tour-request/{id}
        String pasifIlanaAitRandevuUrl = "http://64.227.123.49/tour-request/123"; // Gerekirse dinamik hale getir
        getlandestate.utilities.Driver.getDriver().get(pasifIlanaAitRandevuUrl);

        String pageSource = getlandestate.utilities.Driver.getDriver().getPageSource();
        String currentUrl = getlandestate.utilities.Driver.getDriver().getCurrentUrl();

        boolean isAccessBlocked = pageSource.contains("404")
                || currentUrl.contains("not-found")
                || currentUrl.contains("error")
                || !currentUrl.contains("tour-request");

        Assert.assertTrue("404 ya da yönlendirme bekleniyordu.", isAccessBlocked);
    }




    //US_14 TC01
    @When("Başka bir manager’a ait aktif ilan aranır")
    public void başkaBirManagerAAitAktifIlanAranır() {

        dashBoardPage.aktifIlani.click();
    }


    @When("Bir ilan seçilip detay sayfası açılır")
    public void birIlanSeçilipDetaySayfasıAçılır() {
        dashBoardPage.aktifIlani.click();
    }


    @Then("\"Tur Ayarla\" formu görünür")
    public void turAyarlaFormuGörünür() {
        Assert.assertTrue(dashBoardPage.turAyarlaFormu.isDisplayed());
    }

    @When("Geçerli bir tur tarihi ve saati girilerek form eksiksiz doldurulur")
    public void geçerliBirTurTarihiVeSaatiGirilerekFormEksiksizDoldurulur() {
        dashBoardPage.tarihSecme.click();
        dashBoardPage.saatSecme.click();
    }

    @And("\"Tur Talebi Gönder\" butonuna tıklanır")
    public void turTalebiGonderButonunaTıklanır() {
        dashBoardPage.turTalebiGonderButton.click();
    }

    @When("\"Tur Taleplerim\" sekmesine tıklanır")
    public void turTaleplerimSekmesineTıklanır() {
        dashBoardPage.MyTourRequestsButton.click();
    }


    @Then("\"Tur Talebi\" beklemede olarak listelenir")
    public void turTalebiBeklemedeOlarakListelenir() {
        Assert.assertTrue(dashBoardPage.turTalebiBeklemede.isDisplayed());
    }


    @Then("\"Talebiniz gönderildi\" mesajı görülür")
    public void talebinizGonderildiMesajıGörülür() {
        Assert.assertTrue(dashBoardPage.talebinizGonderildi.isDisplayed());
    }






    //US_14 TC02
    @When("\"İlanlarım\" sekmesine tıklanır")
    public void ilanlarimSekmesineGirilir() {
        dashBoardPage.ilanlarimButton.click();
    }


    @Then("Kendi ilanları listelenir")
    public void kendiIlanlarıListelenir() {
        Assert.assertTrue(dashBoardPage.ilanListesi.isDisplayed());
    }

    @When("Kendi ilana ait detay sayfası açılır")
    public void kendiIlanaAitDetaySayfasıAçılır() {
        dashBoardPage.ilanDetay.click();
    }

    @Then("Detay sayfası açılmalıdır")
    public void detaySayfasıAçılmalıdır() {
        Assert.assertTrue(dashBoardPage.detaySayfasi.isDisplayed());
    }

    @Then("\"Randevu Al\" butonu görünmemeli ya da devre dışı olmalıdır")
    public void butonuGörünmemeliYaDaDevreDışıOlmalıdır() {
        List<WebElement> randevuAlButonListesi = Driver.getDriver().findElements(By.xpath("//button[contains(text(), 'Randevu Al')]"));

        // Buton DOM'da yoksa
        if (randevuAlButonListesi.isEmpty()) {
            System.out.println("Randevu Al butonu DOM'da hiç yok.");
            Assert.assertTrue(true);  // Test geçer
        } else {
            // DOM'da varsa ama görünmüyorsa veya devre dışıysa kontrol et
            WebElement buton = randevuAlButonListesi.get(0);
            Assert.assertFalse(buton.isDisplayed() && buton.isEnabled());
        }
    }




    @Then("\"İşlem yapılamaz\" mesajı ya da başka bir sayfaya yönlendirme gerçekleşmelidir")
    public void mesajıYaDaBaşkaBirSayfayaYönlendirmeGerçekleşmelidir() {
        String pageSource = Driver.getDriver().getPageSource();
        String currentUrl = Driver.getDriver().getCurrentUrl();

        assert pageSource != null;
        Assert.assertTrue(
                pageSource.contains("İşlem yapılamaz") || Objects.requireNonNull(currentUrl).contains("home") || pageSource.contains("404")
        );
    }


    @When("URL üzerinden doğrudan randevu formu açılmaya çalışılır")
    public void urlÜzerindenDoğrudanRandevuFormuAçılmayaÇalışılır() {

        Driver.getDriver().get("http://64.227.123.49/my-adverts");
    }

    @Then("Randevu talebi için onay  ve reddet  butonları görünmemeli veya tıklanamaz olmalı")
    public void randevuTalebiIçinOnay️VeReddetButonlarıGörünmemeliVeyaTıklanamazOlmalı() {
        try {
            // Eğer buton görünüyorsa bile tıklanabilir olmamalı
            Assert.assertFalse(dashBoardPage.kabulEtButton.isDisplayed() && dashBoardPage.kabulEtButton.isEnabled());
            Assert.assertFalse(dashBoardPage.redButton.isDisplayed() && dashBoardPage.redButton.isEnabled());
        } catch (NoSuchElementException e) {
            // Butonlar hiç yoksa da bu geçerli bir durumdur
            Assert.assertTrue(true);
        }
    }




    @And("Onay butonuna tıklanmaya çalışıldığında sistem işlem yapmamalı ve onay gerçekleşmemelidir")
    public void onayButonunaTıklanmayaÇalışıldığındaSistemIşlemYapmamalıVeOnayGerçekleşmemelidir() {
        try {
            if (dashBoardPage.kabulEtButton.isDisplayed() && dashBoardPage.kabulEtButton.isEnabled()) {
                dashBoardPage.kabulEtButton.click();
                WaitUtils.waitFor(2);

                // Onaylanma durumu kontrolü
                String durumText = dashBoardPage.durumElement.getText();
                Assert.assertNotEquals(durumText.toLowerCase(), "onaylandı", "Sistem pasif ilandaki randevuyu onaylamamalı!");
            }
        } catch (NoSuchElementException e) {
            // Buton hiç yoksa test başarılıdır
            Assert.assertTrue(true);

        }
}


}
